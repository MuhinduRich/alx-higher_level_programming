#!/usr/bin/python3
"""
This module provides a function to multiply two matrices.

Example:
    m_a = [[1, 2], [3, 4], [5, 6]]
    m_b = [[7, 8, 9], [10, 11, 12]]
    result = matrix_mul(m_a, m_b)
    # Output: [[27, 30, 33], [61, 68, 75], [95, 106, 117]]
"""

def matrix_mul(m_a, m_b):
    """
    Multiplies two matrices and returns the resulting matrix.

    Args:
        m_a (list of lists of int or float): First matrix.
        m_b (list of lists of int or float): Second matrix.

    Returns:
        list of lists of int or float: Resulting matrix.

    Raises:
        TypeError: If either matrix is not a list or not a list of lists,
            or if one of the elements is not an int or a float.
        ValueError: If either matrix is empty or not rectangular, or if the
            matrices cannot be multiplied.
    """
    if not isinstance(m_a, list) or not isinstance(m_b, list):
        raise TypeError("m_a must be a list or m_b must be a list")
    if not all(isinstance(row, list) for row in m_a) or not all(isinstance(row, list) for row in m_b):
        raise TypeError("m_a must be a list of lists or m_b must be a list of lists")
    if not m_a or not m_b:
        raise ValueError("m_a can't be empty or m_b can't be empty")
    if not all(isinstance(elem, (int, float)) for row in m_a for elem in row) \
            or not all(isinstance(elem, (int, float)) for row in m_b for elem in row):
        raise TypeError("m_a should contain only integers or floats or m_b should contain only integers or floats")
    if not all(len(row) == len(m_a[0]) for row in m_a) or not all(len(row) == len(m_b[0]) for row in m_b):
        raise TypeError("each row of m_a must be of the same size or each row of m_b must be of the same size")
    if len(m_a[0]) != len(m_b):
        raise ValueError("m_a and m_b can't be multiplied")

    result = [[sum(a * b for a, b in zip(row_a, col_b)) for col_b in zip(*m_b)] for row_a in m_a]
    return result
